/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Documents;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-09-24T20:15:11.432209Z[Etc/UTC]")
@Validated
@Tag(name = "documents", description = "Everything about documents")
public interface DocumentsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /documents/findByName/{name} : Delete documents
     * This can only be done by the logged in user.
     *
     * @param name The name that needs to be deleted (required)
     * @return Invalid name supplied (status code 400)
     *         or Document not found (status code 404)
     */
    @Operation(
        operationId = "deleteDocuments",
        summary = "Delete documents",
        description = "This can only be done by the logged in user.",
        tags = { "documents" },
        responses = {
            @ApiResponse(responseCode = "400", description = "Invalid name supplied"),
            @ApiResponse(responseCode = "404", description = "Document not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/documents/findByName/{name}"
    )
    default ResponseEntity<Void> deleteDocuments(
        @Parameter(name = "name", description = "The name that needs to be deleted", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /documents : get all documents
     * Get all documents
     *
     * @return successful operation (status code 200)
     *         or Bad request (status code 400)
     */
    @Operation(
        operationId = "findDocuments",
        summary = "get all documents",
        description = "Get all documents",
        tags = { "documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Documents.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/documents",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Documents>> findDocuments(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"metadata\" : \"{}\", \"docType\" : \"pdf\", \"name\" : \"Script_1\", \"id\" : 10, \"content\" : \"Chapter1 ...\" }, { \"metadata\" : \"{}\", \"docType\" : \"pdf\", \"name\" : \"Script_1\", \"id\" : 10, \"content\" : \"Chapter1 ...\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /documents/findByName/{name} : Finds Documents by name
     * Multiple names can be provided with comma separated strings
     *
     * @param name Names that need to be considered for filter (required)
     * @return successful operation (status code 200)
     *         or Invalid name (status code 400)
     */
    @Operation(
        operationId = "findDocumentsByName",
        summary = "Finds Documents by name",
        description = "Multiple names can be provided with comma separated strings",
        tags = { "documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid name")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/documents/findByName/{name}",
        produces = { "application/json" }
    )
    default ResponseEntity<Object> findDocumentsByName(
        @Parameter(name = "name", description = "Names that need to be considered for filter", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /documents : update a document
     * update a document
     *
     * @param documents update a document (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Document not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "updateDocument",
        summary = "update a document",
        description = "update a document",
        tags = { "documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Documents.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Document not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/documents",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Documents> updateDocument(
        @Parameter(name = "Documents", description = "update a document", required = true) @Valid @RequestBody Documents documents
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metadata\" : \"{}\", \"docType\" : \"pdf\", \"name\" : \"Script_1\", \"id\" : 10, \"content\" : \"Chapter1 ...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /documents : upload a new documents
     * upload a new documents
     *
     * @param documents upload a new documents (required)
     * @return Successful operation (status code 200)
     *         or Invalid input (status code 405)
     */
    @Operation(
        operationId = "uploadDocument",
        summary = "upload a new documents",
        description = "upload a new documents",
        tags = { "documents" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Documents.class))
            }),
            @ApiResponse(responseCode = "405", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/documents",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Documents> uploadDocument(
        @Parameter(name = "Documents", description = "upload a new documents", required = true) @Valid @RequestBody Documents documents
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"metadata\" : \"{}\", \"docType\" : \"pdf\", \"name\" : \"Script_1\", \"id\" : 10, \"content\" : \"Chapter1 ...\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
